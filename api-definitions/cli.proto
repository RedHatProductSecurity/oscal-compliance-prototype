syntax = "proto3";

package c2p.v1;

// Overall Approach: C2P is the client and must initiate communication with the policy providers

// PVP provider-level configuration
// i.e. where do results get stored
message PolicyProviderConfig {}


message ConfigureProviderRequest {}
message ConfigureProviderResponse {}

// Rule Exchange

// Define a single rule parameter
message Parameter {
  // name is the human-readable parameter identifier
  string name = 1;
  // description is the human-readable documentation for the parameter
  string description = 2;
}

// Define a single rule
message Rule {
  // name is the human-readable technical rule identifier
  string name = 1;
  // description is the human-readable documentation for the technical rule
  string description = 2;
  repeated Parameter parameters = 3;
}

// Lifecycle

message GetRulesRequest {}
message GetRulesResponse {}

// Policy Generation

// Create a rule evaluation plan the user can review
// This could generated any policy or complete PVP configuration steps
message PlanRuleEvaluationRequest {}
message PlanRuleEvaluationResponse {}

// Rule Evaluation

message EvaluateRuleRequest {}
message EvaluateRuleResponse {}

message GetResultsRequest {}
message GetResultsResponse {}

service PolicyProviderService {
  // GetRules returns information about supported rules so
  // the client can information the user what a valid configuration would
  // look like.
  rpc GetRules(GetRulesRequest) returns (GetRulesResponse);

  // Initialization of PVP provider
  rpc ConfigureProvider(ConfigureProviderRequest) returns (ConfigureProviderResponse);

  // Lifecycle
  rpc PlanRuleEvaluation(PlanRuleEvaluationRequest) returns (PlanRuleEvaluationResponse);
  rpc EvaluateRule(EvaluateRuleRequest) returns (EvaluateRuleResponse);
}